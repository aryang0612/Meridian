name: üöÄ Deploy Meridian AI SaaS Platform

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # CODE QUALITY & SECURITY
  # ============================================================================
  
  code-quality:
    name: üîç Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier
        run: npm run format:check

      - name: Run TypeScript check
        run: npm run type-check

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run dependency check
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'dependency-check-report.sarif'

  # ============================================================================
  # AUTOMATED TESTING
  # ============================================================================
  
  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: meridian_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d meridian_test -f sql/saas-schema.sql
        env:
          PGPASSWORD: postgres

      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/meridian_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/meridian_test
          REDIS_URL: redis://localhost:6379

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/meridian_test
          REDIS_URL: redis://localhost:6379

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  
  security-scan:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ============================================================================
  # BUILD & PUSH DOCKER IMAGES
  # ============================================================================
  
  build:
    name: üèóÔ∏è Build & Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  
  deploy-staging:
    name: üöß Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name meridian-staging --region us-east-1

      - name: Deploy to staging
        run: |
          envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
          kubectl rollout status deployment/meridian-app -n staging --timeout=300s
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=meridian-app -n staging --timeout=300s
          npm run test:smoke -- --baseUrl=https://staging.meridianai.com

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name meridian-production --region us-east-1

      - name: Create database backup
        run: |
          kubectl create job --from=cronjob/database-backup backup-pre-deploy-$(date +%Y%m%d-%H%M%S) -n production
          kubectl wait --for=condition=complete job/backup-pre-deploy-$(date +%Y%m%d-%H%M%S) -n production --timeout=600s

      - name: Deploy to production (Blue-Green)
        run: |
          # Deploy to green environment
          envsubst < k8s/production/deployment-green.yaml | kubectl apply -f -
          kubectl rollout status deployment/meridian-app-green -n production --timeout=600s
          
          # Run health checks
          kubectl wait --for=condition=ready pod -l app=meridian-app-green -n production --timeout=300s
          
          # Switch traffic to green
          kubectl patch service meridian-app-service -n production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait for traffic switch
          sleep 30
          
          # Scale down blue environment
          kubectl scale deployment meridian-app-blue -n production --replicas=0
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}

      - name: Run production smoke tests
        run: |
          npm run test:smoke -- --baseUrl=https://app.meridianai.com
          npm run test:performance -- --baseUrl=https://app.meridianai.com

      - name: Update monitoring dashboards
        run: |
          curl -X POST "${{ secrets.GRAFANA_API_URL }}/api/dashboards/db" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @monitoring/grafana/dashboards/production.json

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            sbom.spdx.json
            CHANGELOG.md
          generate_release_notes: true

      - name: Notify stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "üöÄ Meridian AI deployed to production!",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "Production",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    }
                  ]
                }
              ]
            }

  # ============================================================================
  # POST-DEPLOYMENT MONITORING
  # ============================================================================
  
  post-deployment:
    name: üìä Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    
    steps:
      - name: Wait for metrics stabilization
        run: sleep 300 # Wait 5 minutes for metrics to stabilize

      - name: Check error rates
        run: |
          ERROR_RATE=$(curl -s "${{ secrets.PROMETHEUS_URL }}/api/v1/query?query=rate(http_requests_total{status=~\"5..\"}[5m])" | jq -r '.data.result[0].value[1]')
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "High error rate detected: $ERROR_RATE"
            exit 1
          fi

      - name: Check response times
        run: |
          RESPONSE_TIME=$(curl -s "${{ secrets.PROMETHEUS_URL }}/api/v1/query?query=histogram_quantile(0.95,rate(http_request_duration_seconds_bucket[5m]))" | jq -r '.data.result[0].value[1]')
          if (( $(echo "$RESPONSE_TIME > 1.0" | bc -l) )); then
            echo "High response time detected: $RESPONSE_TIME seconds"
            exit 1
          fi

      - name: Rollback if issues detected
        if: failure()
        run: |
          kubectl patch service meridian-app-service -n production -p '{"spec":{"selector":{"version":"blue"}}}'
          kubectl scale deployment meridian-app-blue -n production --replicas=3
          echo "Rollback completed due to performance issues"

      - name: Create monitoring alert
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "üö® Deployment rollback triggered!",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Reason",
                      "value": "Performance degradation detected",
                      "short": true
                    },
                    {
                      "title": "Action",
                      "value": "Automatic rollback completed",
                      "short": true
                    }
                  ]
                }
              ]
            }

# ============================================================================
# WORKFLOW CONFIGURATION
# ============================================================================

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  deployments: write 